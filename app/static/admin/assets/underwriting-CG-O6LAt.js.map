{"version":3,"file":"underwriting-CG-O6LAt.js","sources":["../../src/api/underwriting.ts"],"sourcesContent":["import { get, post, put, del } from '@/utils/request'\nimport type { ApiResponse, PaginationQuery, PaginationData, RequestConfig } from '@/types/api'\nimport type { Rule, DiseaseCategory, Disease, Question, Answer, RuleSearchParams } from '@/types/underwriting'\nimport request from '@/utils/request'\nimport type { Parameter, ParameterType } from '@/types/underwriting'\nimport type { AxiosResponse } from 'axios'\n\nconst ruleApi = {\n    // 获取规则列表\n    getRules: async (params: RuleSearchParams): Promise<ApiResponse<PaginationData<Rule>>> => {\n        console.log('[API] 开始获取规则列表, 参数:', params);\n        try {\n            const res = await get<PaginationData<Rule>>('/api/v1/underwriting/rules', { params });\n            console.log('[API] 获取规则列表成功:', {\n                code: res.code,\n                message: res.message,\n                dataLength: res.data?.list?.length,\n                total: res.data?.total\n            });\n            return res;\n        } catch (error) {\n            console.error('[API] 获取规则列表失败:', error);\n            throw error;\n        }\n    },\n\n    // 获取规则详情\n    getRuleDetail: async (id: string): Promise<ApiResponse<Rule>> => {\n        console.log('[API] 开始获取规则详情, ID:', id);\n        try {\n            const res = await get<Rule>(`/api/v1/underwriting/rules/${id}`);\n            console.log('[API] 获取规则详情成功:', {\n                code: res.code,\n                message: res.message,\n                ruleId: res.data?.id,\n                ruleName: res.data?.name\n            });\n            return res;\n        } catch (error) {\n            console.error('[API] 获取规则详情失败:', error);\n            throw error;\n        }\n    },\n\n    // 创建规则\n    createRule: (data: Partial<Rule>): Promise<ApiResponse<Rule>> => {\n        return post('/api/v1/underwriting/rules', data, {\n            loading: true,\n            toast: true\n        } as RequestConfig)\n    },\n\n    // 更新规则\n    updateRule: (id: string, data: Partial<Rule>): Promise<ApiResponse<Rule>> => {\n        return put(`/api/v1/underwriting/rules/${id}`, data, {\n            loading: true,\n            toast: true\n        } as RequestConfig)\n    },\n\n    // 删除规则\n    deleteRule: (id: string): Promise<ApiResponse<void>> => {\n        return del(`/api/v1/underwriting/rules/${id}`, {\n            loading: true,\n            toast: true\n        } as RequestConfig)\n    },\n\n    // 导入规则数据\n    importRuleData: (ruleId: string, file: File): Promise<ApiResponse<void>> => {\n        console.log('[API] 开始导入规则数据:', {\n            ruleId,\n            fileName: file.name,\n            fileSize: file.size\n        });\n        const formData = new FormData()\n        formData.append('file', file)\n        return post(`/api/v1/underwriting/rules/${ruleId}/import`, formData, {\n            headers: {\n                'Content-Type': 'multipart/form-data'\n            },\n            loading: true,\n            toast: true\n        } as RequestConfig)\n    },\n\n    // 导出规则数据\n    exportRuleData: (id: string): Promise<ApiResponse<Blob>> => {\n        return get(`/api/v1/underwriting/rules/${id}/export`, {\n            responseType: 'blob',\n            loading: true,\n            toast: true\n        } as RequestConfig)\n    },\n\n    // 获取规则关联的疾病大类列表\n    getDiseaseCategories: async (ruleId: string): Promise<ApiResponse<DiseaseCategory[]>> => {\n        console.log('[API] 开始获取规则关联的疾病大类, ruleId:', ruleId)\n        try {\n            const res = await get<DiseaseCategory[]>(`/api/v1/underwriting/rules/${ruleId}/disease-categories`)\n            console.log('[API] 获取规则关联的疾病大类成功:', {\n                code: res.code,\n                message: res.message,\n                categoriesCount: res.data?.length\n            })\n            return res\n        } catch (error) {\n            console.error('[API] 获取规则关联的疾病大类失败:', error)\n            throw error\n        }\n    },\n\n    // 获取规则关联的疾病列表\n    getDiseases: async (ruleId: string): Promise<ApiResponse<Disease[]>> => {\n        console.log('[API] 开始获取规则关联的疾病列表, ruleId:', ruleId)\n        try {\n            const res = await get<Disease[]>(`/api/v1/underwriting/rules/${ruleId}/diseases`)\n            console.log('[API] 获取规则关联的疾病列表成功:', {\n                code: res.code,\n                message: res.message,\n                diseasesCount: res.data?.length\n            })\n            return res\n        } catch (error) {\n            console.error('[API] 获取规则关联的疾病列表失败:', error)\n            throw error\n        }\n    },\n\n    // 获取规则相关的问题列表\n    getRuleQuestions: (ruleId: string): Promise<ApiResponse<Question[]>> => {\n        return get(`/api/v1/underwriting/rules/${ruleId}/questions`, {\n            loading: true,\n            toast: true\n        } as RequestConfig)\n    },\n\n    // 获取规则相关的答案列表\n    getRuleAnswers: (ruleId: string): Promise<ApiResponse<Answer[]>> => {\n        return get(`/api/v1/underwriting/rules/${ruleId}/answers`, {\n            loading: true,\n            toast: true\n        } as RequestConfig)\n    }\n}\n\n// 智核参数管理\nexport const getParameterList = async (params: Record<string, any>): Promise<ApiResponse<PaginationData<Parameter>>> => {\n    console.log('开始获取参数列表, 参数:', params);\n    try {\n        const res = await request.get('/api/v1/underwriting/ai-parameter/', {\n            params,\n            headers: {\n                'Authorization': `Bearer ${localStorage.getItem('token')}`\n            }\n        });\n        console.log('获取参数列表成功:', res);\n        return res.data;\n    } catch (error) {\n        console.error('获取参数列表失败:', error);\n        throw error;\n    }\n}\n\nexport const getParameterTypes = async (): Promise<ApiResponse<ParameterType[]>> => {\n    console.log('开始获取参数类型列表');\n    try {\n        const res = await request.get('/api/v1/underwriting/ai-parameter/types', {\n            headers: {\n                'Authorization': `Bearer ${localStorage.getItem('token')}`\n            }\n        });\n        console.log('获取参数类型列表成功:', res);\n        return res.data;\n    } catch (error) {\n        console.error('获取参数类型列表失败:', error);\n        throw error;\n    }\n}\n\n// 获取规则列表（用于下拉选择）\nexport const getRules = async (): Promise<ApiResponse<{ id: number; name: string }[]>> => {\n    try {\n        const res = await request.get('/api/v1/underwriting/rules', {\n            params: {\n                pageSize: 1000\n            },\n            headers: {\n                'Authorization': `Bearer ${localStorage.getItem('token')}`\n            }\n        });\n\n        if (res.data?.code === 200 && res.data?.data?.list) {\n            return {\n                code: 200,\n                message: '获取规则列表成功',\n                data: res.data.data.list.map((rule: { id: number; name: string }) => ({\n                    id: rule.id,\n                    name: rule.name\n                }))\n            };\n        }\n\n        return {\n            code: res.data?.code || 500,\n            message: res.data?.message || '获取规则列表失败',\n            data: []\n        };\n    } catch (error) {\n        console.error('获取规则列表失败:', error);\n        return {\n            code: 500,\n            message: error instanceof Error ? error.message : '获取规则列表失败',\n            data: []\n        };\n    }\n};\n\nexport const getParameter = (id: number): Promise<ApiResponse<Parameter>> => {\n    return request.get(`/api/v1/underwriting/ai-parameter/${id}`, {\n        headers: {\n            'Authorization': `Bearer ${localStorage.getItem('token')}`\n        }\n    })\n}\n\nexport const createParameter = (data: Partial<Parameter>): Promise<ApiResponse<Parameter>> => {\n    // 确保ID字段为数字类型\n    const processedData = {\n        ...data,\n        parameter_type_id: data.parameter_type_id ? Number(data.parameter_type_id) : undefined,\n        rule_id: data.rule_id ? Number(data.rule_id) : undefined,\n        status: 'enabled'  // 添加默认状态\n    };\n\n    console.log('发起创建参数请求, 数据:', {\n        url: '/api/v1/underwriting/ai-parameter/',  // 添加末尾斜杠\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${localStorage.getItem('token')}`\n        },\n        data: processedData\n    });\n\n    return request.post('/api/v1/underwriting/ai-parameter/', processedData, {  // 添加末尾斜杠\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${localStorage.getItem('token')}`\n        }\n    });\n}\n\nexport const updateParameter = (id: number, data: Partial<Parameter>): Promise<ApiResponse<Parameter>> => {\n    return request.put(`/api/v1/underwriting/ai-parameter/${id}`, data, {\n        headers: {\n            'Authorization': `Bearer ${localStorage.getItem('token')}`\n        }\n    })\n}\n\nexport const deleteParameter = (id: number): Promise<ApiResponse<void>> => {\n    return request.delete(`/api/v1/underwriting/ai-parameter/${id}`, {\n        headers: {\n            'Authorization': `Bearer ${localStorage.getItem('token')}`\n        }\n    })\n}\n\nexport default ruleApi\n"],"names":["ruleApi","params","res","get","_b","_a","_c","error","id","data","post","put","del","ruleId","file","formData","getParameterList","request","getParameterTypes","getRules","rule","_d","_e","getParameter","createParameter","processedData","updateParameter","deleteParameter"],"mappings":"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"}